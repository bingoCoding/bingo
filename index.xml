<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bingo</title>
    <link>https://bingoCoding.github.io/index.xml</link>
    <description>Recent content on bingo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](https://github.com/ppoffice).</copyright>
    <lastBuildDate>Sun, 27 Nov 2016 15:06:21 +0800</lastBuildDate>
    <atom:link href="https://bingoCoding.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>shiro报错 err 1146</title>
      <link>https://bingocoding.github.io/2016/11/27/shiro%E6%8A%A5%E9%94%99-err-1146</link>
      <pubDate>Sun, 27 Nov 2016 15:06:21 +0800</pubDate>
      
      <guid>https://bingocoding.github.io/2016/11/27/shiro%E6%8A%A5%E9%94%99-err-1146</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;shiro-mysql-err-1146&#34;&gt;shiro mysql err 1146&lt;/h3&gt;

&lt;p&gt;报错情形：
学习shiro,使用jdbcRealm进行身份认证，用jdbc访问数据库后报错。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.apache.shiro.authc.AuthenticationException: There was a SQL error while authenticating user [zhang]
    at org.apache.shiro.realm.jdbc.JdbcRealm.doGetAuthenticationInfo(JdbcRealm.java:254)
    at org.apache.shiro.realm.AuthenticatingRealm.getAuthenticationInfo(AuthenticatingRealm.java:568)
    at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doSingleRealmAuthentication(ModularRealmAuthenticator.java:180)
    at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doAuthenticate(ModularRealmAuthenticator.java:267)
    at org.apache.shiro.authc.AbstractAuthenticator.authenticate(AbstractAuthenticator.java:198)
    at org.apache.shiro.mgt.AuthenticatingSecurityManager.authenticate(AuthenticatingSecurityManager.java:106)
    at org.apache.shiro.mgt.DefaultSecurityManager.login(DefaultSecurityManager.java:270)
    at org.apache.shiro.subject.support.DelegatingSubject.login(DelegatingSubject.java:256)
    at com.shiro.shiro01.Shiro2.main(Shiro2.java:25)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown error 1146
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
    at java.lang.reflect.Constructor.newInstance(Unknown Source)
    at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
    at com.mysql.jdbc.Util.getInstance(Util.java:387)
    at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:942)
    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3966)
    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3902)
    at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2526)
    at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2673)
    at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2549)
    at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1861)
    at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:1962)
    at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeQuery(NewProxyPreparedStatement.java:76)
    at org.apache.shiro.realm.jdbc.JdbcRealm.getPasswordForUser(JdbcRealm.java:284)
    at org.apache.shiro.realm.jdbc.JdbcRealm.doGetAuthenticationInfo(JdbcRealm.java:221)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;百度 err 1146 错误，大部分问题出在找不到数据表，或者安装出错。于是，检查自己的数据库：
        mysql&amp;gt; show databases
            -&amp;gt; ;
        +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
        | Database           |
        +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
        | information_schema |
        | mysql              |
        | performance_schema |
        | shirotest          |
        | sys                |
        +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
        5 rows in set (0.00 sec)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mysql&amp;gt; use shirotest
    Database changed
    mysql&amp;gt; show tables
        -&amp;gt; ;
    +---------------------+
    | Tables_in_shirotest |
    +---------------------+
    | user                |
    +---------------------+
    1 row in set (0.00 sec)

    mysql&amp;gt; select * from user
        -&amp;gt; ;
    +----+----------+----------+
    | id | username | password |
    +----+----------+----------+
    |  1 | zhang    | 1234     |
    |  2 | wang     | 123456   |
    +----+----------+----------+
    2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;确定数据库没问题，再从shiro错误入手：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;at org.apache.shiro.realm.jdbc.JdbcRealm.doGetAuthenticationInfo(JdbcRealm.java:221)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看源码：
    JdbcRealm.java &amp;ndash;&amp;gt;
        password = getPasswordForUser(conn, username)[0];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getPasswordForUser--&amp;gt;
    ps = conn.prepareStatement(authenticationQuery);
authenticationQuery--&amp;gt;
    protected String authenticationQuery = DEFAULT_AUTHENTICATION_QUERY;
DEFAULT_AUTHENTICATION_QUERY--&amp;gt;
    protected static final String DEFAULT_AUTHENTICATION_QUERY = &amp;quot;select password from users where username = ?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，发现问题，我的数据库表明是user而不是users。
shiro身份验证需要的数据库表明必须是users,同时username，和password字段也要一致。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初学shiro--基础</title>
      <link>https://bingocoding.github.io/2016/11/27/%E5%88%9D%E5%AD%A6shiro--%E5%9F%BA%E7%A1%80</link>
      <pubDate>Sun, 27 Nov 2016 15:03:28 +0800</pubDate>
      
      <guid>https://bingocoding.github.io/2016/11/27/%E5%88%9D%E5%AD%A6shiro--%E5%9F%BA%E7%A1%80</guid>
      <description>&lt;p&gt;
    &amp;gt; Apache Shiro（日语“堡垒（Castle）”的意思）是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，可为任何应用提供安全保障- 从命令行应用、移动应用到大型网络及企业应用。&lt;/p&gt;

&lt;p&gt;Shiro为解决下列问题（我喜欢称它们为应用安全的四要素）提供了保护应用的API：&lt;/p&gt;

&lt;p&gt;认证 - 用户身份识别，常被称为用户“登录”；&lt;/p&gt;

&lt;p&gt;授权 - 访问控制；&lt;/p&gt;

&lt;p&gt;密码加密 - 保护或隐藏数据防止被偷窥；&lt;/p&gt;

&lt;p&gt;会话管理 - 每用户相关的时间敏感的状态。&lt;/p&gt;

&lt;p&gt;Shiro还支持一些辅助特性，如Web应用安全、单元测试和多线程，它们的存在强化了上面提到的四个要素。&lt;/p&gt;

&lt;p&gt;身份认证：&lt;br&gt;&lt;/p&gt;

&lt;p&gt;subject(认证主体):&lt;br&gt;
principals:身份，可以是一个用户名，邮件，电话号码等等唯一标识。&lt;br&gt;
credentials:凭证，常见有密码，数字证书等。&lt;br&gt;
一般情况下，principals和credentials表示用户名和密码。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;realms(域)：&lt;br&gt;
shiro从realms中获取验证数据&lt;br&gt;
其中shiro.ini属于text realm&lt;br&gt;
realm有很多种，jdbc realm,jndi realm ,text realm &amp;hellip;&amp;hellip;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;权限认证：&lt;br&gt;
既访问控制，既在应用中控制谁拥有访问权限。&lt;br&gt;
权限认证核心三要素：权限，角色，用户&lt;br&gt;&lt;/p&gt;

&lt;p&gt;授权：&lt;br&gt;
1.编程式授权&lt;br&gt;
    基于角色的访问控制&lt;br&gt;
    基于权限的访问控制&lt;br&gt;
2.注解式授权&lt;br&gt;
3.jsp标签授权&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
共有的仓库&lt;br&gt;
&lt;a href=&#34;http://repository.sonatype.org/content/groups/public/&#34;&gt;http://repository.sonatype.org/content/groups/public/&lt;/a&gt;&lt;br&gt;
 &lt;a href=&#34;http://mirrors.ibiblio.org/pub/mirrors/maven2/org/acegisecurity/&#34;&gt;http://mirrors.ibiblio.org/pub/mirrors/maven2/org/acegisecurity/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://mvnrepository.com/&#34;&gt;http://mvnrepository.com/&lt;/a&gt;&lt;br&gt;
 &lt;a href=&#34;http://search.maven.org/&#34;&gt;http://search.maven.org/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;私有的仓库&lt;br&gt;
&lt;a href=&#34;http://repository.codehaus.org/&#34;&gt;http://repository.codehaus.org/&lt;/a&gt;&lt;br&gt;
 &lt;a href=&#34;http://snapshots.repository.codehaus.org/&#34;&gt;http://snapshots.repository.codehaus.org/&lt;/a&gt;&lt;br&gt;
 &lt;a href=&#34;http://people.apache.org/repo/m2-snapshot-repository&#34;&gt;http://people.apache.org/repo/m2-snapshot-repository&lt;/a&gt;&lt;br&gt;
 &lt;a href=&#34;http://people.apache.org/repo/m2-incubating-repository/&#34;&gt;http://people.apache.org/repo/m2-incubating-repository/&lt;/a&gt; &lt;br&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>web之filter过滤器学习</title>
      <link>https://bingocoding.github.io/2016/11/07/web%E4%B9%8Bfilter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AD%A6%E4%B9%A0</link>
      <pubDate>Mon, 07 Nov 2016 20:00:30 +0800</pubDate>
      
      <guid>https://bingocoding.github.io/2016/11/07/web%E4%B9%8Bfilter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AD%A6%E4%B9%A0</guid>
      <description>&lt;p&gt;
&amp;gt; 定义：过滤器是一个服务器的组件，它可以截取用户端的请求与响应信息，并对这些信息过滤。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Servlet过滤器是在 java Servlet 2.3 中定义的，它能够对Servlet容器中的请求和响应对象，进行检查和修改

&amp;gt; Servlet过滤器并不会生成request和response对象，它只起到过滤的作用

&amp;gt; Servlet过滤器会在请求还未到Servlet之前检查request对象,修改 Request Header 和 Request 内容；在Servlet被调用后检查Response对象，修改 Response Header 和 Response 内容

&amp;gt; Servlet过滤器可以过滤 Servlet , JSP , HTML 等web组件（JSP最终也是转换为Servlet的）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;定义一个servlet过滤器-fileter&#34;&gt;定义一个Servlet过滤器（Fileter）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;写一个java类，实现 java.servlet.Filter接口 
实现三个方法：

    init(FilterConfig filterConfig) - - -初始化  

    doFilter(ServletRequest request,ServletResponse response,FilterChain chain)   - - - 完成实际的过滤操作  这个方法得到调用后，里面重要的一点是要调用chain.doFilter(request,response)方法，它可以将请求传递给下一个过滤器（或目标资源），或者转发、重定向到其他资源。                                                                                   
    destroy()  - - -过滤器销毁阶段  Servlet容器在销毁过滤器实例之前该方法得到调用，以释放占用的资源
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;过滤器工作过程&#34;&gt;过滤器工作过程：&lt;/h2&gt;

&lt;p&gt;web容器启动的时候会加载过滤器。过滤器启动。&lt;br&gt;
当用户发送请求服务器时，并不会直接到服务器，而是先到过滤器，过滤器会进行判断是否符合请求规则。&lt;br&gt;
如果符合规则，过滤器会将用户请求发送至web资源。&lt;br&gt;
web资源对用户的请求进行响应时，也会先将资源响应发送至过滤器，过滤器再将web资源的响应发送给用户。&lt;br&gt;
&lt;img src=&#34;{{&amp;quot;img/Screenshot_20161107-220059.jpg&amp;quot;}}&#34; alt=&#34;过滤器的工作原理&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;过滤器的生命周期&#34;&gt;过滤器的生命周期&lt;/h2&gt;

&lt;p&gt;实例化：通过web.xml配置，容器启动会加载web资源，包括过滤器。过滤器被加载即完成实例化。只有当web容器启动时，过滤器才会进行实例化，即过滤器只会实例化一次。&lt;br&gt;
初始化：init()&amp;ndash;web容器创建过滤器实例后（过滤器实例化成功）会调用过滤器的init() 方法。这个方法中可以读取web.xml文件中过滤器的参数，进行初始化操作。同样只初始化一次。&lt;br&gt;
过滤：doFilter()&amp;ndash;过滤方法（过滤器的核心方法）。每次请求与过滤关联的url时，都会执行过滤方法。&lt;br&gt;
销毁：destroy()&amp;ndash;当web容器关闭时，在销毁过滤器前调用该方法。可以释放过滤器占用的资源。&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    web.xml配置信息
    &amp;lt;filter&amp;gt;
        &amp;lt;filter-name&amp;gt;filter的名字&amp;lt;/filter-name&amp;gt;
        &amp;lt;filter-class&amp;gt;filter的完全限定名&amp;lt;/filter-class&amp;gt;
        &amp;lt;!-- 初始化参数 可以不写或是写1对或多对--&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;description&amp;gt;描述信息&amp;lt;/description&amp;gt;
            &amp;lt;param-name&amp;gt;参数名称&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;参数的值&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
    &amp;lt;/filter&amp;gt;
    &amp;lt;filter-mapping&amp;gt;
        &amp;lt;filter-name&amp;gt;filter的名字&amp;lt;/filter-name&amp;gt;
        &amp;lt;!-- 当用户请求的URL和指定的URL匹配时触发过滤器工作--&amp;gt;
        &amp;lt;url-pattern&amp;gt;URL&amp;lt;/url-pattern&amp;gt;
        &amp;lt;!-- 可以不写或是写1对或多对 
            值为：REQUEST|INCLUDE|FORWARD|ERROR 默认REQUEST--&amp;gt;
        &amp;lt;dispatcher&amp;gt;&amp;lt;/dispatcher&amp;gt;
    &amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;过滤器链&#34;&gt;过滤器链&lt;/h3&gt;

&lt;p&gt;当用户请求的URL和过滤器的多个映射路径相同时，过滤器会依次经过过滤器。&lt;br&gt;
服务器会按照web.xml中过滤器定义的先后顺序组成一条过滤器链。&lt;br&gt;
执行过程：
&lt;img src=&#34;{{&amp;quot;img/Screenshot_20161107-215237.jpg&amp;quot;}}&#34; alt=&#34;过滤器的执行过程&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dubbo初识一</title>
      <link>https://bingocoding.github.io/2016/11/05/dubbo%E5%88%9D%E8%AF%86%E4%B8%80</link>
      <pubDate>Sat, 05 Nov 2016 22:39:09 +0800</pubDate>
      
      <guid>https://bingocoding.github.io/2016/11/05/dubbo%E5%88%9D%E8%AF%86%E4%B8%80</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;认知dubbo&#34;&gt;认知dubbo&lt;/h3&gt;

&lt;p&gt;Dubbo是什么？答：一个框架，两个方案。&lt;br&gt;
Dubbo是一个分布式服务框架，致力于提高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。&lt;/p&gt;

&lt;h2 id=&#34;特点&#34;&gt;特点&lt;/h2&gt;

&lt;p&gt;1.远程通讯:提供透明化的远程方法调用，提供多协议支持。简单说就是调用远程方法就和调用本地方法一样，只需简单配置，不通过任何API。&lt;br&gt;
2.集群容错：支持软负载均衡，失败容错，地址路由，动态配置等集群。（在内网代替了nighx,lvs,f转硬件的负载均衡器。目的：节约成本，减少单点故障）&lt;br&gt;
3.自动发现：基于注册中心的目录服务（基于zookeeper的注册与发现），使服务消费方能动态的查找服务提供方（基于接口名查找服务提供者的ip和服务，不需写死服务器的ip，域名与端口，让zookeeper自动发现），支持平滑减少或增加机器.&lt;br&gt;
4.spring的集成。dubbo采用了spring配置方法，透明化接入应用，对应用没有任何API侵入，只需用spring加载Dubbo的配置即可。&lt;/p&gt;

&lt;h2 id=&#34;选择dubbo原因&#34;&gt;选择Dubbo原因&lt;/h2&gt;

&lt;p&gt;1.MVC、RPC、SOA框架的演进&lt;br&gt;
2.目前SOA技术主要框架有两个SOA和ICE&lt;br&gt;
相似功能：注册中心、负载均衡、安全机制访问控制&lt;br&gt;
Doubbo通过zookeeper注册和发现服务。ICE自带注册中心；负载均衡：各自有自己的负载均衡算法；安全方面：Dubbo定义了路由规则、访问控制、黑白名单等。ICE则是有防火墙服务，允许客户端和服务端防火墙安全来通信。&lt;br&gt;
不同功能：Dubbo服务治理更多一些，有一个服务管理平台，ICE有一个软件补丁服务，服务端发布补丁，客户端能自动检测并更新，另外还有一个发布-订阅服务。&lt;br&gt;
Dubbo属于轻量级服务，类似spring，ICE属于重量级，自带注册中心等等服务。&lt;br&gt;
跨语言支持程度：Dubbo不支持跨语言，但是dubbox实现了跨语言，内部实现了thrift调用。ICE支持跨语言。&lt;br&gt;
目前使用活跃度Dubbo更活跃。&lt;br&gt;
Dubbo开发语言是java，ICE是c 语言。&lt;br&gt;
综合看，Dubbo更适合java开发者。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;开发&#34;&gt;开发&lt;/h3&gt;

&lt;p&gt;学会常用7大标签
&lt;a href=&#34;dubbo:application&#34;&gt;dubbo:application&lt;/a&gt;
provider服务：application：当前服务项目信息的配置。&lt;br&gt;
container：当前服务的运行容器默认jetty。&lt;br&gt;
provider专有服务：&lt;br&gt;
provider:服务提供方的服务治理性能调优的配置信息，系统级的配置，eg:服务类型，服务线程，相应数据包等。&lt;br&gt;
service：服务提供者暴露的接口配置，针对某个接口的配置。service继承provider，是继承关系。&lt;br&gt;
consumer专有服务：&lt;br&gt;
consumer：服务治理性能调优的配置信息，系统级的配置，eg:远程调用的超时时间&lt;br&gt;
reference:服务消费者引用设置。继承consumer。&lt;br&gt;
reference引用service的接口。&lt;br&gt;
registry:注册中心的配置，可以注册多个。使用时，只需reference\service配置指定registry属性。&lt;br&gt;
protocol:远程调用协议，服务与服务之间的通信配置。&lt;br&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python初识</title>
      <link>https://bingocoding.github.io/2016/10/31/python%E5%88%9D%E8%AF%86</link>
      <pubDate>Mon, 31 Oct 2016 22:35:33 +0800</pubDate>
      
      <guid>https://bingocoding.github.io/2016/10/31/python%E5%88%9D%E8%AF%86</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;python是一门简单-功能强大-面向对象的解释形语言&#34;&gt;python是一门简单，功能强大，面向对象的解释形语言。&lt;/h3&gt;

&lt;h2 id=&#34;特点&#34;&gt;特点&lt;/h2&gt;

&lt;h4 id=&#34;1-严格区分大小写&#34;&gt;1.严格区分大小写&lt;/h4&gt;

&lt;h4 id=&#34;2-简单易学面向对象&#34;&gt;2.简单易学面向对象&lt;/h4&gt;

&lt;h5 id=&#34;3-开源&#34;&gt;3.开源&lt;/h5&gt;

&lt;h5 id=&#34;4-丰富的资源库文件&#34;&gt;4.丰富的资源库文件&lt;/h5&gt;

&lt;h5 id=&#34;5-跨平台&#34;&gt;5.跨平台&lt;/h5&gt;

&lt;h5 id=&#34;6-解释性语言&#34;&gt;6.解释性语言&lt;/h5&gt;

&lt;h5 id=&#34;7-高级语言-不需要考虑底层交互&#34;&gt;7.高级语言（不需要考虑底层交互）&lt;/h5&gt;

&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;

&lt;p&gt;python默认不支持识别utf-8的中文字符串，需要指明识别，即在文件头部写上识别注释就行。
        # coding=utf-8&lt;/p&gt;

&lt;h2 id=&#34;python小数整除-用-表示&#34;&gt;python小数整除 用‘//’表示&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    eg: 6.3//2==3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;求幂运算-用-表示&#34;&gt;求幂运算 用‘**’表示&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    eg:2**3==8  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5种数据类型-type-obj-函数可以查看数据类型&#34;&gt;5种数据类型：(type(obj)函数可以查看数据类型)&lt;/h2&gt;

&lt;p&gt;数字：整型、长整型、浮点型、复数型（complex:实部和虚部，虚部用j表示）&lt;br&gt;
字符串:&lt;br&gt;
列表、元组、字典&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;python中常量的定义&#34;&gt;python中常量的定义&lt;/h2&gt;

&lt;p&gt;python中常量的定义需要用对象的方法来创建。&lt;/p&gt;

&lt;h2 id=&#34;python字符串拼接用法&#34;&gt;python字符串拼接用法&lt;/h2&gt;

&lt;p&gt;先用占位符占位，然后通过格式化方法注入参数。&lt;br&gt;
        eg: print &amp;lsquo;{0} 是一门 {1} 的语言&amp;rsquo;.format(&amp;ldquo;python&amp;rdquo;, &amp;ldquo;简单易学&amp;rdquo;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>https://bingocoding.github.io/2016/10/15/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2</link>
      <pubDate>Sat, 15 Oct 2016 15:47:34 +0800</pubDate>
      
      <guid>https://bingocoding.github.io/2016/10/15/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用hugo搭建个人博客&#34;&gt;使用hugo搭建个人博客&lt;/h3&gt;

&lt;p&gt;先说说hugo.
一直想用一个简单的框架搭建一个自己的博客，后来看到有人使用了jekyll,于是自己也尝试搭建了一个。虽然最后也搭建成功了，但是还是有点不爽的。其他的不说，对于一个新手来说，Jekyll以及那一堆静态网站生成器安装总感觉麻烦（依赖多，配置多）。当然不爽还因为，因为我是菜鸟网页搭建好后还有许多地方看起来不那么完美。对于我来说，一个博客应该将时间花在内容上而不是各种折腾网站。
直到看到有人说用hugo搭建个人博客或中小型站点后，发现只是搭建一个环境的话hugo更适合我。
hugo 生成网站速度飞快，用几ms不敢说，反正瞬间完成。更重要的是搭建安装过程简单。&lt;/p&gt;

&lt;h2 id=&#34;hugo是一个通用网站框架-静态网站生成器&#34;&gt;hugo是一个通用网站框架&amp;ndash;静态网站生成器。&lt;/h2&gt;

&lt;h4 id=&#34;1-安装&#34;&gt;1.安装&lt;/h4&gt;

&lt;p&gt;到 &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt;  下载对应的操作系统版本的Hugo二进制文件。
比如：我安装的windows版本的，只需下载windows版32或64位的压缩文件。
解压下载好的文件，里面有3个文件，把这三个文件放到同一个文件夹下。
比如我放到D:\hugo\bin文件夹下。
配置环境变量。把hugo.exe文件所在路径放到用户环境PATH下。
打开doc窗口，输入hugo help 出现一下内容说明已经安装成功：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    hugo is the main command, used to build your Hugo site.

    Hugo is a Fast and Flexible Static Site Generator
    built with love by spf13 and friends in Go. ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-生成站点&#34;&gt;2.生成站点&lt;/h4&gt;

&lt;p&gt;打开命令行窗口。输入站点创建命令：hugo new site +你要生成的网站的目录路径。
比如我的：hugo new site D:/hugo/site/bingoCoding
或者：进入到目标文件夹下：D盘 hugo文件夹中，右键单击，单击在此处打开命令行。输入命令hugo new site site/bingoCoding
至此，网站框架已经生成到bingoCoding文件夹下。
站点目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ▸ archetypes/
    ▸ content/
    ▸ layouts/
    ▸ static/
    config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;content目录里放的是自己写的markdown文章，layouts目录里放的是网站的模板文件，static目录里放的是一些图片、css、js等资源。&lt;/p&gt;

&lt;h4 id=&#34;3-创建文章&#34;&gt;3.创建文章&lt;/h4&gt;

&lt;p&gt;创建一个 first 页面：
        hugo new post/first.md
first.md 自动生成到了 content/post/first.md。一般文章都放到post文件夹下，方便管理和之后生成聚合页面。
内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据自己喜好，可以换成 YAML 格式（使用 &amp;mdash; 标记）或者 JSON 格式。&lt;/p&gt;

&lt;h4 id=&#34;4-安装皮肤&#34;&gt;4.安装皮肤&lt;/h4&gt;

&lt;p&gt;到&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;hugo&lt;/a&gt; 下载喜欢的皮肤。
我下载的hugo-icarus-theme皮肤。对于一个博客来说，功能已经很全了。
在bingoCoding下创建themes文件夹。把下载的皮肤压缩包解压到themes下。
找到themes\hugo-icarus-theme\exampleSite下的config.toml和data复制到网站根路径下即bingoCoding下替换原有文件和文件夹。
修改config.toml 中参数即可。&lt;/p&gt;

&lt;h4 id=&#34;5-运行hugo&#34;&gt;5.运行Hugo&lt;/h4&gt;

&lt;p&gt;在你的站点根目录执行 Hugo 命令进行调试：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器里打开： &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-关于部署&#34;&gt;6.关于部署&lt;/h4&gt;

&lt;p&gt;一般情况当然是部署在 GitHub Pages 上啦，首先在GitHub上创建一个Repository，命名为：bingoCoding.github.io （bingoCoding替换为你的github用户名）。&lt;/p&gt;

&lt;p&gt;在站点根目录bingoCoding目录下执行 Hugo 命令生成最终页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    hugo --theme=hugo-icarus-theme --baseUrl=&amp;quot;https://bingoCoding.github.io/&amp;quot;
    http一定要加s啊,不然访问的时候会提示不安全信息。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一切顺利，所有静态页面都会生成到 public 目录。&lt;/p&gt;

&lt;p&gt;将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。
如果没安装git的话.可以直接打开GitHub上创建的Repository，点击bingoCoding.github.io,选择upload files,把public文件夹下的所有文件拷贝到github上，commit.&lt;/p&gt;

&lt;p&gt;浏览器里访问：&lt;a href=&#34;http://bingoCoding.github.io/&#34;&gt;http://bingoCoding.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;官方文档：&lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;https://gohugo.io/overview/introduction/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;皮肤列表：&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;https://github.com/spf13/hugoThemes&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>